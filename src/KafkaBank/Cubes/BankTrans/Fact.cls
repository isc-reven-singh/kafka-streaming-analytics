Include %DeepSee

/// Fact table for cube 'BankTrans'.<br/>
/// THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.
Class KafkaBank.Cubes.BankTrans.Fact Extends (%DeepSee.FactTable, %DeepSee.CubeFunctionSet) [ Final, GeneratedBy = KafkaBank.Cubes.BankTrans.CLS, Inheritance = right, Owner = {}, ProcedureBlock ]
{

/// Index for fact 2.
Index Dxccnum On Dxccnum [ Type = bitmap ];

/// Index for fact 3.
Index Dxcategory On Dxcategory [ Type = bitmap ];

/// Index for fact 4.
Index Dxmerchant On Dxmerchant [ Type = bitmap ];

/// Index for fact 5.
Index Dxtransdatetime On Dxtransdatetime [ Type = bitmap ];

/// Index for fact 6.
Index Dxfirst On Dxfirst [ Type = bitmap ];

/// Index for fact 7.
Index Dxlast On Dxlast [ Type = bitmap ];

/// Index for fact 8.
Index Dxgender On Dxgender [ Type = bitmap ];

/// Index for fact 9.
Index Dxdob On Dxdob [ Type = bitmap ];

/// Index for fact 10.
Index Dxjob On Dxjob [ Type = bitmap ];

/// Index for fact 11.
Index Dxstreet On Dxstreet [ Type = bitmap ];

/// Index for fact 12.
Index Dxstate On Dxstate [ Type = bitmap ];

/// Index for fact 13.
Index Dxcity On Dxcity [ Type = bitmap ];

/// Index for fact 14.
Index Dxzip On Dxzip [ Type = bitmap ];

/// Index for fact 15.
Index Dxisfraud On Dxisfraud [ Type = bitmap ];

/// Reference to original data in source table.
Property %sourceId As KafkaBank.Trans;

/// This indicates which partition (set of 1M) this fact is in.
Property %dspartition As %Integer [ Calculated, SqlComputeCode = {Set {%dspartition}=({ID}\1024000)+1}, SqlComputed ];

/// Dimension: Dxccnum<br/>
/// Source: ccnum
Property Dxccnum As KafkaBank.Cubes.BankTrans.Starccnum;

/// Dimension: Dxcategory<br/>
/// Source: category
Property Dxcategory As KafkaBank.Cubes.BankTrans.Starcategory;

/// Dimension: Dxmerchant<br/>
/// Source: merchant
Property Dxmerchant As KafkaBank.Cubes.BankTrans.Starmerchant;

/// Dimension: Dxtransdatetime<br/>
/// Source: transdatetime
Property Dxtransdatetime As KafkaBank.Cubes.BankTrans.Startransdatetime;

/// Dimension: Dxfirst<br/>
/// Source: first
Property Dxfirst As KafkaBank.Cubes.BankTrans.Starfirst;

/// Dimension: Dxlast<br/>
/// Source: last
Property Dxlast As KafkaBank.Cubes.BankTrans.Starlast;

/// Dimension: Dxgender<br/>
/// Source: gender
Property Dxgender As KafkaBank.Cubes.BankTrans.Stargender;

/// Dimension: Dxdob<br/>
/// Source: dob
Property Dxdob As KafkaBank.Cubes.BankTrans.Stardob;

/// Dimension: Dxjob<br/>
/// Source: job
Property Dxjob As KafkaBank.Cubes.BankTrans.Starjob;

/// Dimension: Dxstreet<br/>
/// Source: street
Property Dxstreet As KafkaBank.Cubes.BankTrans.Starstreet;

/// Dimension: Dxstate<br/>
/// Source: state
Property Dxstate As KafkaBank.Cubes.BankTrans.Starstate;

/// Dimension: Dxcity<br/>
/// Source: city
Property Dxcity As KafkaBank.Cubes.BankTrans.Starcity;

/// Dimension: Dxzip<br/>
/// Source: zip
Property Dxzip As KafkaBank.Cubes.BankTrans.Starzip;

/// Dimension: Dxisfraud<br/>
/// Source: isfraud
Property Dxisfraud As KafkaBank.Cubes.BankTrans.Starisfraud;

/// Return the total number of items within the Fact table.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.
ClassMethod %Count() As %Integer
{
 Set tCount = 0
 &sql(SELECT COUNT(*) INTO :tCount FROM KafkaBank_Cubes_BankTrans.Fact)
 Quit tCount
}

/// Update a range of Facts with data from the source table row with ids from <var>pStartId</var> to <var>pEndId</var>.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %UpdateFacts(pStartId As %String, pEndId As %String, pBatchMode As %Boolean = 0, ByRef pChunks As %Integer, pVerbose As %Boolean = 0, pTaskGroup As %String = "", Output pUpdates As %Integer, pRefProp As %String = "", pRefID As %String = "", ByRef pDimTables, pFactList As %String = "") As %Status
{
 Set tSC = $$$OK
 Set tRS = ""
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Try {
 Set tUseFactList = ($G(pFactList)'="")
 Set (SQLCODE,tStarId) = ""
 Set pUpdates = 0
 Set tLastCount = 0
 Set tID = ""
 Set tRows = 0

 Set tUseIDList = 0
 If ($G(pStartId)'="")&&$ListValid(pStartId) {
  Set tTempFileKey = $LG(pStartId,1)
  Set tChunk = $LG(pStartId,2)
  Set tIDUpdateTempList = ""
  If $D($$$DeepSeeTempSourceId(tTempFileKey,tChunk)) {
   Set tOffset = $O($$$DeepSeeTempSourceId(tTempFileKey,tChunk,""),1,tOffsetInfo)
   While tOffset'="" {
    Set tUseIDList = 1
    Set tSourceId = $LG(tOffsetInfo,1)
    Set tAction = $LG(tOffsetInfo,2)
    Set:(tAction<=2) tIDUpdateTempList = tIDUpdateTempList _ $LB(tSourceId)
    Set tOffset = $O($$$DeepSeeTempSourceId(tTempFileKey,tChunk,tOffset),1,tOffsetInfo)
   } // while offset
  } // if temp sourceId data
 } // if pStartId is list

 If (pEndId="")&&'tUseIDList {
  Set:+$G(%dsReadCommitted,1) oldzu=$ZU(115,2,1)
  Set pEndId=pStartId
 }
 If (tUseIDList) {
  &sql(DECLARE sqlist530789573 CURSOR FOR
  SELECT %ID,%EXTERNAL(category) "Dxcategory",%EXTERNAL(ccnum) "Dxccnum",%EXTERNAL(city) "Dxcity",%EXTERNAL(dob) "Dxdob",%EXTERNAL("first") "Dxfirst",%EXTERNAL(gender) "Dxgender",%EXTERNAL(isfraud) "Dxisfraud",%EXTERNAL(job) "Dxjob",%EXTERNAL("last") "Dxlast",%EXTERNAL(merchant) "Dxmerchant",%EXTERNAL(state) "Dxstate",%EXTERNAL(street) "Dxstreet",%EXTERNAL(transdatetime) "Dxtransdatetime",%EXTERNAL(zip) "Dxzip" FROM KafkaBank.Trans
  WHERE %ID %INLIST :tIDUpdateTempList SIZE ((64000))
  )
  &sql(OPEN sqlist530789573)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sqlist530789573 INTO :tID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip"))
  If (SQLCODE'=0) {
    Set tSC = $$$ERROR($$$GeneralError,"Error fetching row: ("_$G(SQLCODE)_") "_$G(%msg))
    &sql(CLOSE sqlist530789573)
      Do ##class(%DeepSee.Utils).%LogBuildError("BANKTRANS",pStartId,tSC)
    Quit
  }
 }
 ElseIf (pRefProp'="") {
  Set tRS = ##class(%ResultSet).%New()
  Set tSC = tRS.Prepare("SELECT %ID,%EXTERNAL(category) ""Dxcategory"",%EXTERNAL(ccnum) ""Dxccnum"",%EXTERNAL(city) ""Dxcity"",%EXTERNAL(dob) ""Dxdob"",%EXTERNAL(""first"") ""Dxfirst"",%EXTERNAL(gender) ""Dxgender"",%EXTERNAL(isfraud) ""Dxisfraud"",%EXTERNAL(job) ""Dxjob"",%EXTERNAL(""last"") ""Dxlast"",%EXTERNAL(merchant) ""Dxmerchant"",%EXTERNAL(state) ""Dxstate"",%EXTERNAL(street) ""Dxstreet"",%EXTERNAL(transdatetime) ""Dxtransdatetime"",%EXTERNAL(zip) ""Dxzip"" FROM KafkaBank.Trans"_" WHERE "_pRefProp_"=?")
  If $$$ISERR(tSC) Quit
  Set tSC = tRS.Execute(pRefID)
  If $$$ISERR(tSC) Quit
 }
 ElseIf (pStartId=pEndId) {
  &sql(DECLARE sqeq530789573 CURSOR FOR
  SELECT %ID,%EXTERNAL(category) "Dxcategory",%EXTERNAL(ccnum) "Dxccnum",%EXTERNAL(city) "Dxcity",%EXTERNAL(dob) "Dxdob",%EXTERNAL("first") "Dxfirst",%EXTERNAL(gender) "Dxgender",%EXTERNAL(isfraud) "Dxisfraud",%EXTERNAL(job) "Dxjob",%EXTERNAL("last") "Dxlast",%EXTERNAL(merchant) "Dxmerchant",%EXTERNAL(state) "Dxstate",%EXTERNAL(street) "Dxstreet",%EXTERNAL(transdatetime) "Dxtransdatetime",%EXTERNAL(zip) "Dxzip" FROM KafkaBank.Trans
  WHERE %ID = :pStartId
  )
  &sql(OPEN sqeq530789573)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sqeq530789573 INTO :tID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip"))
  If (SQLCODE'=0) {
    Set tSC = $$$ERROR($$$GeneralError,"Error fetching row: ("_$G(SQLCODE)_") "_$G(%msg))
    &sql(CLOSE sqeq530789573)
      Do ##class(%DeepSee.Utils).%LogBuildError("BANKTRANS",pStartId,tSC)
    Quit
  }
 }
 Else {
  &sql(DECLARE sq530789573 CURSOR FOR
  SELECT %ID,%EXTERNAL(category) "Dxcategory",%EXTERNAL(ccnum) "Dxccnum",%EXTERNAL(city) "Dxcity",%EXTERNAL(dob) "Dxdob",%EXTERNAL("first") "Dxfirst",%EXTERNAL(gender) "Dxgender",%EXTERNAL(isfraud) "Dxisfraud",%EXTERNAL(job) "Dxjob",%EXTERNAL("last") "Dxlast",%EXTERNAL(merchant) "Dxmerchant",%EXTERNAL(state) "Dxstate",%EXTERNAL(street) "Dxstreet",%EXTERNAL(transdatetime) "Dxtransdatetime",%EXTERNAL(zip) "Dxzip" FROM KafkaBank.Trans
  WHERE %ID BETWEEN :pStartId  AND :pEndId
  )
  &sql(OPEN sq530789573)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq530789573 INTO :tID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip"))
  If (SQLCODE'=0) {
    Set tSC = $$$ERROR($$$GeneralError,"Error fetching row: ("_$G(SQLCODE)_") "_$G(%msg))
    &sql(CLOSE sq530789573)
    If ($G(tID)'="") {
       Do ##class(%DeepSee.Utils).%LogBuildError("BANKTRANS",tID,tSC)
    }
    Quit
  }
 }
 set:$IsObject(tRS) idColName = tRS.GetColumnName(1)
 While ($S($IsObject(tRS):tRS.Next(.tSC),1:SQLCODE=0)) {
 Try {
 If ($IsObject(tRS)) {
  If $$$ISERR(tSC) Quit
  Set tID = $G(tRS.Data(idColName))
  Set %var("Dxcategory") = $G(tRS.Data("Dxcategory"))
  Set %var("Dxccnum") = $G(tRS.Data("Dxccnum"))
  Set %var("Dxcity") = $G(tRS.Data("Dxcity"))
  Set %var("Dxdob") = $G(tRS.Data("Dxdob"))
  Set %var("Dxfirst") = $G(tRS.Data("Dxfirst"))
  Set %var("Dxgender") = $G(tRS.Data("Dxgender"))
  Set %var("Dxisfraud") = $G(tRS.Data("Dxisfraud"))
  Set %var("Dxjob") = $G(tRS.Data("Dxjob"))
  Set %var("Dxlast") = $G(tRS.Data("Dxlast"))
  Set %var("Dxmerchant") = $G(tRS.Data("Dxmerchant"))
  Set %var("Dxstate") = $G(tRS.Data("Dxstate"))
  Set %var("Dxstreet") = $G(tRS.Data("Dxstreet"))
  Set %var("Dxtransdatetime") = $G(tRS.Data("Dxtransdatetime"))
  Set %var("Dxzip") = $G(tRS.Data("Dxzip"))
 }
 Set %dsSourceId = $G(tID)
 Set tExStartTime = $ZH
 Set x = $I(^IRIS.Temp.DeepSeeBuildStats($namespace,"BANKTRANS","expr"),$ZH-tExStartTime)

 #; invoke method to process this fact
 Set tFactId = ""
 Set tSC = ##class(KafkaBank.Cubes.BankTrans.Fact).%ProcessFact(tID,pBatchMode,.%var,.tFactId,.tErrorMsg,.pDimTables,,pFactList,.tUpdater)
 If (tFactId'="") {
 If $$$ISOK(tSC) {
  Set pUpdates = pUpdates+1
  Set pChunks(tFactId\64000+1) = ""
 }
 ElseIf (pVerbose) {
  Write "Error filing row: ",tID,!
  Write:tErrorMsg'="" tErrorMsg,!
  Write $System.Status.GetOneStatusText(tSC),!!
  Set tSC = $$$OK
 }
 Kill pDimTables
 Set tRows = tRows + 1
 If (pVerbose&&'(tRows#1000)) Write $C(13,27)_"[0J"_"Building fact table: ",?25,$J($FN(tRows,",",0),10)," fact(s) updated."
 If (pVerbose&&'(tRows#1000)&&(+$G(%dserrcount))) Write " ",$J($FN(%dserrcount,",",0),10)," error(s)"
 If ((pTaskGroup'="")&&'(tRows#1000)) {
  Set tDelta = tRows - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
  Set tLastCount = tRows
 }
 } ;factId
  }
  Catch (ex) {
    Set tSC = ex.AsStatus()
    If ($G(tID)'="") {
      Do ##class(%DeepSee.Utils).%LogBuildError("BANKTRANS",tID,tSC)
    }
  }
  If '$IsObject(tRS) {
   If (tUseIDList) {
    &sql(FETCH sqlist530789573 INTO :tID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip"))
   }
   ElseIf (pStartId=pEndId) {
    &sql(FETCH sqeq530789573 INTO :tID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip"))
   }
   Else {
    &sql(FETCH sq530789573 INTO :tID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip"))
   }
  }
 } ;while
  If '$IsObject(tRS) {
   If (tUseIDList) {
    &sql(CLOSE sqlist530789573)
   }
   ElseIf (pStartId=pEndId) {
    &sql(CLOSE sqeq530789573)
   }
   Else {
    &sql(CLOSE sq530789573)
   }
  }
 If (pVerbose) Write $C(13,27)_"[0J"_"Building fact table: "_$FN(+$G(tRows),",",0)_" fact(s) updated"
 If (pTaskGroup'="") {
  Set tDelta = tRows - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sqeq530789573)
  &sql(CLOSE sq530789573)
 }
  Set:$D(oldzu) zu=$ZU(115,2,oldzu)
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
  If ($G(tID)'="") {
   Do ##class(%DeepSee.Utils).%LogBuildError("BANKTRANS",tID,tSC)
  }
 }
 Quit tSC
}

/// Update all Facts with data from the source table.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %BuildAllFacts(pVerbose As %Boolean = 0, pFactList As %String = "") As %Status
{
 Set tSC = $$$OK
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Try {
 Set tUseFactList = ($G(pFactList)'="")
 Set (SQLCODE,tStarId) = ""
 Set tLastCount = 0
 Set tID = ""
 Set tRows = 0
  &sql(DECLARE sq2530789573 CURSOR FOR
  SELECT %ID,%EXTERNAL(category) "Dxcategory",%EXTERNAL(ccnum) "Dxccnum",%EXTERNAL(city) "Dxcity",%EXTERNAL(dob) "Dxdob",%EXTERNAL("first") "Dxfirst",%EXTERNAL(gender) "Dxgender",%EXTERNAL(isfraud) "Dxisfraud",%EXTERNAL(job) "Dxjob",%EXTERNAL("last") "Dxlast",%EXTERNAL(merchant) "Dxmerchant",%EXTERNAL(state) "Dxstate",%EXTERNAL(street) "Dxstreet",%EXTERNAL(transdatetime) "Dxtransdatetime",%EXTERNAL(zip) "Dxzip" FROM KafkaBank.Trans
  )
  &sql(OPEN sq2530789573)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq2530789573 INTO :tID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip"))
  If ((SQLCODE=100)&&pVerbose) {
   Write "No source data found.",!
  }
  While (SQLCODE=0) {
  If ($D(%dsmaxfacts)&&(tRows>=+$G(%dsmaxfacts))) Quit
  Try {
 Set %dsSourceId = $G(tID)
 Set tExStartTime = $ZH
 Set x = $I(^IRIS.Temp.DeepSeeBuildStats($namespace,"BANKTRANS","expr"),$ZH-tExStartTime)

 #; invoke method to process this fact
 Set tFactId = ""
 Set tSC = ##class(KafkaBank.Cubes.BankTrans.Fact).%ProcessFact(tID,1,.%var,.tFactId,.tErrorMsg,,,pFactList,.tUpdater)
 Set:$$$ISERR(tSC) err = $I(%dserrcount)
 If ($$$ISERR(tSC)&&pVerbose) {
  Write "Error filing row: ",tID,!
  Write:tErrorMsg'="" tErrorMsg,!
  Write $System.Status.GetOneStatusText(tSC),!!
  Set tSC = $$$OK
 }
 If (tFactId'="") {
  Set tRows = tRows + 1
  Set %dsfactcount = tRows
  If (pVerbose&&'(tRows#1000)) Write $C(13,27)_"[0J"_"Building fact table: ",?25,$J($FN(tRows,",",0),10)," fact(s) updated."
  If (pVerbose&&'(tRows#1000)&&(+$G(%dserrcount))) Write " ",$J($FN(%dserrcount,",",0),10)," error(s)"
 } ;factId
  }
  Catch (ex) {
    Set tSC = ex.AsStatus()
    If ($G(tID)'="") {
      Do ##class(%DeepSee.Utils).%LogBuildError("BANKTRANS",tID,tSC)
    }
  }
  &sql(FETCH sq2530789573 INTO :tID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip"))
 } ;while
  &sql(CLOSE sq2530789573)
 If (pVerbose) Write $C(13,27)_"[0J"_"Building fact table: "_$FN(+$G(tRows),",",0)_" fact(s) updated"
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sq2530789573)
 }
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
  If ($G(tID)'="") {
   Do ##class(%DeepSee.Utils).%LogBuildError("BANKTRANS",tID,tSC)
  }
 }
 Quit tSC
}

/// Create a temp file of all source ids.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %BuildTempFile(pTempKey As %String, Output pImplemented As %Boolean, pVerbose As %Boolean = 0) As %Status
{
 Set tSC = $$$OK
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Set pImplemented = 1
 Try {
 Set (SQLCODE,tStarId) = ""
 Kill $$$DeepSeeTempSourceId(pTempKey)
 Set tID = ""
 Set tRows = 0
 Set tUpdate = ..%Count()
  &sql(DECLARE sq3530789573u CURSOR FOR
  SELECT %sourceId FROM KafkaBank_Cubes_BankTrans.Fact
  )
  &sql(DECLARE sq3530789573i CURSOR FOR
  SELECT %ID FROM KafkaBank.Trans
  )
  If tUpdate {
   Set %dsmaxfacts = tUpdate
   &sql(OPEN sq3530789573u)
  } Else {
   &sql(OPEN sq3530789573i)
  }
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  If tUpdate {
   &sql(FETCH sq3530789573u INTO :tID)
  } Else {
   &sql(FETCH sq3530789573i INTO :tID)
  }
  If ((SQLCODE=100)&&pVerbose) {
   Write "No source data found.",!
  }
  While (SQLCODE=0) {
  Set tRows = tRows+1
  Set tChunk = tRows\64000+1
  Set tOffset = tRows#64000+1
  Set:tID'="" $$$DeepSeeTempSourceId(pTempKey,tChunk,tOffset) = $LB(tID,''tUpdate)
  If (pVerbose&&'(tRows#10000)) Write $C(13,27)_"[0J"_"Building temp file: ",?25,$J($FN(tRows,",",0),10)," record(s) processed."
  If ($D(%dsmaxfacts)&&(tRows>=+$G(%dsmaxfacts))) Quit
  If tUpdate {
   &sql(FETCH sq3530789573u INTO :tID)
  } Else {
   &sql(FETCH sq3530789573i INTO :tID)
  }
 } ;while
  If tUpdate {
   &sql(CLOSE sq3530789573u)
  } Else {
   &sql(CLOSE sq3530789573i)
  }
 If (pVerbose) Write $C(13,27)_"[0J"_"Building temp file: "_$FN(+$G(tRows),",",0)_" record(s) processed"
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  If tUpdate {
   &sql(CLOSE sq3530789573u)
  } Else {
   &sql(CLOSE sq3530789573i)
  }
 }
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
 }
 Quit tSC
}

/// Check for the existence of a single ID in the source table.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %CheckSourceId(pTestId As %String, pVerbose As %Boolean = 0, Output pSC As %Status) As %Boolean
{
 // Method generation added by DTB422
 Set tSourceExists = 0
 Set pSC = $$$OK
 Try {
  &sql(SELECT COUNT(%ID) INTO :tExists FROM KafkaBank.Trans WHERE %ID = :pTestId)
  If (tExists) {
   Set tSourceExists = 1
  }
 }
 Catch(ex) {
  Set pSC = ex.AsStatus()
 }
 If ($$$ISERR(pSC)) {
  Do ..%LogError(pSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(pSC)
  }
 }
 Quit tSourceExists
}

/// Perform the work of updating one fact in the cube.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %ProcessFact(pID As %String, pBatchMode As %Boolean = 0, ByRef %var As %String, ByRef pFactId As %Integer, Output pErrorMsg As %String, ByRef pDimTables, pDimensionsOnly As %Boolean = 0, pFactList As %String = "", ByRef pSQLUpdate As %SQL.StatementResult = {$$$NULLOREF}) As %Status
{
 Set tSC = $$$OK
 New %ROWID,%msg,%value,%source,%expression
 Try {
  Set (SQLCODE,tStarId) = ""
  Set pErrorMsg = ""
  Set pFactId = $G(pFactId)
  Set %value = ""

  // + DTB886 - Consult the pFactList. If defined, remove anything that is not in the list from %var
  // It is assumed that pFactList is a $lb in this method
  Set tLimitedList=0
  If (pFactList'="") {
    Set tLimitedList = 1
    Set tOrigBatchMode = pBatchMode
    Set pBatchMode = 0
    Merge tOriginalVar = %var
    Kill %var
    For f=1:1:$LL(pFactList) {
      Set tFact = $LG(pFactList,f)
      Set:$D(tOriginalVar(tFact)) %var(tFact) = tOriginalVar(tFact)
    }
  }
  If tLimitedList {
    If '$G($$$DeepSeeMetaGLVN("cubes","BANKTRANS","namedFactNums")) {
      Set tSC = $$$ERROR($$$GeneralError,"Cube 'BANKTRANS' does not support updates using a fact list.")
      Quit
    }
  }
  // - DTB886

  If (pDimensionsOnly) {
   Set tFactId=""
   Set tIsInsert = 1
  }
  ElseIf (pBatchMode) {
   Set zuSetting = $zu(115,1,0)
   Set tIsInsert = 1
  }
  ElseIf (pID'="") {
   Set tFactId = $O($$$DeepSeeIndexGLVN("BANKTRANS","%sourceId",pID,""))
   Set tIsInsert = ''(tFactId="")
  }
  ElseIf (pFactId'="") {
   If ($D($$$DeepSeeIndexGLVN("BANKTRANS","%sourceIdReverse",pFactId))) {
    Set tFactId = pFactId
    Set tIsInsert = 0
   }
   Else {
    Set tFactId = ""
    Set tIsInsert = 1
   }
  }
  Else {
   Set tFactId = ""
   Set tIsInsert = 1
  }

  If ('pBatchMode && tLimitedList && tIsInsert) {
    Quit
  }

  #; apply null replacements
  Set:$D(%var("Dxcategory"))&&(($G(%var("Dxcategory"))="")||($G(%var("Dxcategory"))=$C(0))) %var("Dxcategory") = "<null>"
  Set:$D(%var("Dxccnum"))&&(($G(%var("Dxccnum"))="")||($G(%var("Dxccnum"))=$C(0))) %var("Dxccnum") = "<null>"
  Set:$D(%var("Dxcity"))&&(($G(%var("Dxcity"))="")||($G(%var("Dxcity"))=$C(0))) %var("Dxcity") = "<null>"
  Set:$D(%var("Dxdob"))&&(($G(%var("Dxdob"))="")||($G(%var("Dxdob"))=$C(0))) %var("Dxdob") = "<null>"
  Set:$D(%var("Dxfirst"))&&(($G(%var("Dxfirst"))="")||($G(%var("Dxfirst"))=$C(0))) %var("Dxfirst") = "<null>"
  Set:$D(%var("Dxgender"))&&(($G(%var("Dxgender"))="")||($G(%var("Dxgender"))=$C(0))) %var("Dxgender") = "<null>"
  Set:$D(%var("Dxisfraud"))&&(($G(%var("Dxisfraud"))="")||($G(%var("Dxisfraud"))=$C(0))) %var("Dxisfraud") = "<null>"
  Set:$D(%var("Dxjob"))&&(($G(%var("Dxjob"))="")||($G(%var("Dxjob"))=$C(0))) %var("Dxjob") = "<null>"
  Set:$D(%var("Dxlast"))&&(($G(%var("Dxlast"))="")||($G(%var("Dxlast"))=$C(0))) %var("Dxlast") = "<null>"
  Set:$D(%var("Dxmerchant"))&&(($G(%var("Dxmerchant"))="")||($G(%var("Dxmerchant"))=$C(0))) %var("Dxmerchant") = "<null>"
  Set:$D(%var("Dxstate"))&&(($G(%var("Dxstate"))="")||($G(%var("Dxstate"))=$C(0))) %var("Dxstate") = "<null>"
  Set:$D(%var("Dxstreet"))&&(($G(%var("Dxstreet"))="")||($G(%var("Dxstreet"))=$C(0))) %var("Dxstreet") = "<null>"
  Set:$D(%var("Dxtransdatetime"))&&(($G(%var("Dxtransdatetime"))="")||($G(%var("Dxtransdatetime"))=$C(0))) %var("Dxtransdatetime") = "<null>"
  Set:$D(%var("Dxzip"))&&(($G(%var("Dxzip"))="")||($G(%var("Dxzip"))=$C(0))) %var("Dxzip") = "<null>"

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starisfraud
 If ($G(%var("Dxisfraud"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARISFRAUD","Primary",$zu(28,$G(%var("Dxisfraud")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxisfraud") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxisfraud"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starisfraud",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starisfraud'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARISFRAUD","Primary",$zu(28,$G(%var("Dxisfraud")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxisfraud") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starisfraud (Dxisfraud) VALUES (:%var("Dxisfraud")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starisfraud",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starisfraud' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxisfraud") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starisfraud",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starcategory
 If ($G(%var("Dxcategory"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARCATEGORY","Primary",$G(%var("Dxisfraud")),$zu(28,$G(%var("Dxcategory")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxcategory") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxcategory"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starcategory",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starcategory'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARCATEGORY","Primary",$G(%var("Dxisfraud")),$zu(28,$G(%var("Dxcategory")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxcategory") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starcategory (Dxcategory,Dxisfraud) VALUES (:%var("Dxcategory"),:%var("Dxisfraud")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starcategory",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starcategory' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxcategory") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starcategory",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Stargender
 If ($G(%var("Dxgender"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARGENDER","Primary",$zu(28,$G(%var("Dxgender")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxgender") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxgender"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Stargender",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Stargender'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARGENDER","Primary",$zu(28,$G(%var("Dxgender")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxgender") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Stargender (Dxgender) VALUES (:%var("Dxgender")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Stargender",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Stargender' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxgender") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Stargender",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starstate
 If ($G(%var("Dxstate"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARSTATE","Primary",$G(%var("Dxgender")),$zu(28,$G(%var("Dxstate")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxstate") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxstate"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starstate",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starstate'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARSTATE","Primary",$G(%var("Dxgender")),$zu(28,$G(%var("Dxstate")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxstate") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starstate (Dxstate,Dxgender) VALUES (:%var("Dxstate"),:%var("Dxgender")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starstate",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starstate' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxstate") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starstate",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starcity
 If ($G(%var("Dxcity"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARCITY","Primary",$G(%var("Dxstate")),$zu(28,$G(%var("Dxcity")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxcity") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxcity"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starcity",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starcity'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARCITY","Primary",$G(%var("Dxstate")),$zu(28,$G(%var("Dxcity")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxcity") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starcity (Dxcity,Dxstate) VALUES (:%var("Dxcity"),:%var("Dxstate")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starcity",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starcity' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxcity") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starcity",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starstreet
 If ($G(%var("Dxstreet"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARSTREET","Primary",$G(%var("Dxcity")),$zu(28,$G(%var("Dxstreet")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxstreet") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxstreet"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starstreet",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starstreet'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARSTREET","Primary",$G(%var("Dxcity")),$zu(28,$G(%var("Dxstreet")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxstreet") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starstreet (Dxstreet,Dxcity) VALUES (:%var("Dxstreet"),:%var("Dxcity")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starstreet",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starstreet' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxstreet") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starstreet",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starzip
 If ($G(%var("Dxzip"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARZIP","Primary",$G(%var("Dxstreet")),$zu(28,$G(%var("Dxzip")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxzip") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxzip"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starzip",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starzip'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARZIP","Primary",$G(%var("Dxstreet")),$zu(28,$G(%var("Dxzip")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxzip") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starzip (Dxzip,Dxstreet) VALUES (:%var("Dxzip"),:%var("Dxstreet")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starzip",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starzip' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxzip") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starzip",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starmerchant
 If ($G(%var("Dxmerchant"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARMERCHANT","Primary",$G(%var("Dxcategory")),$zu(28,$G(%var("Dxmerchant")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxmerchant") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxmerchant"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starmerchant",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starmerchant'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARMERCHANT","Primary",$G(%var("Dxcategory")),$zu(28,$G(%var("Dxmerchant")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxmerchant") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starmerchant (Dxmerchant,Dxcategory) VALUES (:%var("Dxmerchant"),:%var("Dxcategory")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starmerchant",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starmerchant' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxmerchant") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starmerchant",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starccnum
 If ($G(%var("Dxccnum"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARCCNUM","Primary",$G(%var("Dxmerchant")),$zu(28,$G(%var("Dxccnum")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxccnum") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxccnum"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starccnum",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starccnum'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARCCNUM","Primary",$G(%var("Dxmerchant")),$zu(28,$G(%var("Dxccnum")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxccnum") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starccnum (Dxccnum,Dxmerchant) VALUES (:%var("Dxccnum"),:%var("Dxmerchant")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starccnum",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starccnum' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxccnum") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starccnum",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starjob
 If ($G(%var("Dxjob"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARJOB","Primary",$G(%var("Dxzip")),$zu(28,$G(%var("Dxjob")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxjob") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxjob"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starjob",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starjob'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARJOB","Primary",$G(%var("Dxzip")),$zu(28,$G(%var("Dxjob")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxjob") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starjob (Dxjob,Dxzip) VALUES (:%var("Dxjob"),:%var("Dxzip")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starjob",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starjob' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxjob") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starjob",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Stardob
 If ($G(%var("Dxdob"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARDOB","Primary",$G(%var("Dxjob")),$zu(28,$G(%var("Dxdob")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxdob") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxdob"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Stardob",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Stardob'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARDOB","Primary",$G(%var("Dxjob")),$zu(28,$G(%var("Dxdob")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxdob") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Stardob (Dxdob,Dxjob) VALUES (:%var("Dxdob"),:%var("Dxjob")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Stardob",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Stardob' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxdob") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Stardob",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starlast
 If ($G(%var("Dxlast"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARLAST","Primary",$G(%var("Dxdob")),$zu(28,$G(%var("Dxlast")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxlast") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxlast"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starlast",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starlast'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARLAST","Primary",$G(%var("Dxdob")),$zu(28,$G(%var("Dxlast")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxlast") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starlast (Dxlast,Dxdob) VALUES (:%var("Dxlast"),:%var("Dxdob")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starlast",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starlast' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxlast") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starlast",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Startransdatetime
 If ($G(%var("Dxtransdatetime"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARTRANSDATETIME","Primary",$G(%var("Dxccnum")),$zu(28,$G(%var("Dxtransdatetime")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxtransdatetime") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxtransdatetime"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Startransdatetime",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Startransdatetime'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARTRANSDATETIME","Primary",$G(%var("Dxccnum")),$zu(28,$G(%var("Dxtransdatetime")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxtransdatetime") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Startransdatetime (Dxtransdatetime,Dxccnum) VALUES (:%var("Dxtransdatetime"),:%var("Dxccnum")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Startransdatetime",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Startransdatetime' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxtransdatetime") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Startransdatetime",tLockKey)
  }
 }

 #; STAR Table: KafkaBank.Cubes.BankTrans.Starfirst
 If ($G(%var("Dxfirst"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARFIRST","Primary",$G(%var("Dxlast")),$zu(28,$G(%var("Dxfirst")),7,113),""))
  If (tStarId '= "") {
   Set %var("Dxfirst") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("Dxfirst"),7,113)
  Lock +$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starfirst",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'KafkaBank_Cubes_BankTrans.Starfirst'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("KAFKABANK.CUBES.BANKTRANS.STARFIRST","Primary",$G(%var("Dxlast")),$zu(28,$G(%var("Dxfirst")),7,113),""))
   If (tStarId '= "") {
    Set %var("Dxfirst") = tStarId
   }
   Else {
    &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Starfirst (Dxfirst,Dxlast) VALUES (:%var("Dxfirst"),:%var("Dxlast")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starfirst",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'KafkaBank_Cubes_BankTrans.Starfirst' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("Dxfirst") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("KafkaBank.Cubes.BankTrans.Starfirst",tLockKey)
  }
 }
 If ('pBatchMode) {
    Set tVal = $G(%var("Dxccnum"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",2,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",2))
    }
    Set tVal = $G(%var("Dxcategory"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",3,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",3))
    }
    Set tVal = $G(%var("Dxmerchant"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",4,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",4))
    }
    Set tVal = $G(%var("Dxtransdatetime"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",5,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",5))
    }
    Set tVal = $G(%var("Dxfirst"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",6,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",6))
    }
    Set tVal = $G(%var("Dxlast"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",7,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",7))
    }
    Set tVal = $G(%var("Dxgender"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",8,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",8))
    }
    Set tVal = $G(%var("Dxdob"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",9,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",9))
    }
    Set tVal = $G(%var("Dxjob"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",10,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",10))
    }
    Set tVal = $G(%var("Dxstreet"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",11,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",11))
    }
    Set tVal = $G(%var("Dxstate"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",12,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",12))
    }
    Set tVal = $G(%var("Dxcity"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",13,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",13))
    }
    Set tVal = $G(%var("Dxzip"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",14,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",14))
    }
    Set tVal = $G(%var("Dxisfraud"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BANKTRANS",15,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BANKTRANS","fact",15))
    }
 }

 #; INSERT or UPDATE data into fact table
 // DTB886 - Build these for relevant cases below.
 Set tListINTO = "%sourceId"
 Set tListParameters = "?"
 Set tListVALUES($I(tListVALUES)) = pID
 Set tFact = $O(%var(""))
 While (tFact'="") {
   Set tListINTO = tListINTO _ $S($L(tListINTO):",",1:"") _ tFact
   Set tListParameters = tListParameters _ $S($L(tListParameters):",",1:"") _ "?"
   Set tListVALUES($I(tListVALUES)) = $G(%var(tFact))
   Set tFact = $O(%var(tFact))
 }
 Set:'tIsInsert tListVALUES($I(tListVALUES)) = tFactId

 If (pDimensionsOnly) {
 }
 ElseIf (pBatchMode) {
  If tLimitedList {
    // DTB886 - Handle a defined incoming pFactList. This forces use of dynamic SQL and has trimmed the available %var
    If '$IsObject(pSQLUpdate) {
    	Set tSQL = "INSERT %NOLOCK %NOINDEX INTO KafkaBank_Cubes_BankTrans.Fact ("_tListINTO_") VALUES ("_tListParameters_")"

    	Set pSQLUpdate = ##class(%SQL.Statement).%New()
    	Set tSC = pSQLUpdate.%Prepare(tSQL)
    	If $$$ISERR(tSC) Quit
    }
    Set tListResult = pSQLUpdate.%Execute(tListVALUES...)

    Set pFactId = tListResult.%ROWID
    Set SQLCODE = tListResult.%SQLCODE
  }
  Else {
    &sql(INSERT %NOLOCK %NOINDEX INTO KafkaBank_Cubes_BankTrans.Fact (%sourceId,Dxcategory,Dxccnum,Dxcity,Dxdob,Dxfirst,Dxgender,Dxisfraud,Dxjob,Dxlast,Dxmerchant,Dxstate,Dxstreet,Dxtransdatetime,Dxzip)
         VALUES (:pID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip")))
    Set pFactId = %ROWID
  }
  If (pFactId'="") {
    Set:pID'="" $$$DeepSeeIndexGLVN("BANKTRANS","%sourceId",pID,pFactId) = ""
    Set $$$DeepSeeIndexGLVN("BANKTRANS","%sourceIdReverse",pFactId) = pID
  }
 }
 Else {
  If ($G(tFactId)'="") {
   If tLimitedList {
    // DTB886 - Handle a defined incoming pFactList. This forces use of dynamic SQL and has trimmed the available %var
    If '$IsObject(pSQLUpdate) {
    	Set tSQL = "UPDATE"_$S(+$G(tOrigBatchMode):" %NOINDEX",1:"")_" KafkaBank_Cubes_BankTrans.Fact ("_tListINTO_") VALUES ("_tListParameters_") WHERE %ID = ?"

    	Set pSQLUpdate = ##class(%SQL.Statement).%New()
    	Set tSC = pSQLUpdate.%Prepare(tSQL)
    	If $$$ISERR(tSC) Quit
    }
    Set tListResult = pSQLUpdate.%Execute(tListVALUES...)

    Set pFactId = tFactId
    Set SQLCODE = tListResult.%SQLCODE
   }
   Else {
    &sql(UPDATE KafkaBank_Cubes_BankTrans.Fact (%sourceId,Dxcategory,Dxccnum,Dxcity,Dxdob,Dxfirst,Dxgender,Dxisfraud,Dxjob,Dxlast,Dxmerchant,Dxstate,Dxstreet,Dxtransdatetime,Dxzip)
         VALUES (:pID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip")) WHERE %ID = :tFactId)
    Set pFactId = tFactId
   }
  }
  Else {
   If tLimitedList {
     // DTB886 - Handle a defined incoming pFactList. This forces use of dynamic SQL and has trimmed the available %var
    If '$IsObject(pSQLUpdate) {
    	Set tSQL = "INSERT INTO KafkaBank_Cubes_BankTrans.Fact ("_tListINTO_") VALUES ("_tListParameters_")"

    	Set pSQLUpdate = ##class(%SQL.Statement).%New()
    	Set tSC = pSQLUpdate.%Prepare(tSQL)
    	If $$$ISERR(tSC) Quit
    }
    Set tListResult = pSQLUpdate.%Execute(tListVALUES...)

    Set pFactId = tListResult.%ROWID
    Set SQLCODE = tListResult.%SQLCODE
   }
   Else {
     &sql(INSERT INTO KafkaBank_Cubes_BankTrans.Fact (%sourceId,Dxcategory,Dxccnum,Dxcity,Dxdob,Dxfirst,Dxgender,Dxisfraud,Dxjob,Dxlast,Dxmerchant,Dxstate,Dxstreet,Dxtransdatetime,Dxzip)
          VALUES (:pID,:%var("Dxcategory"),:%var("Dxccnum"),:%var("Dxcity"),:%var("Dxdob"),:%var("Dxfirst"),:%var("Dxgender"),:%var("Dxisfraud"),:%var("Dxjob"),:%var("Dxlast"),:%var("Dxmerchant"),:%var("Dxstate"),:%var("Dxstreet"),:%var("Dxtransdatetime"),:%var("Dxzip")))
     Set pFactId = %ROWID
   }
  }
  If (pFactId'="") {
    Set:pID'="" $$$DeepSeeIndexGLVN("BANKTRANS","%sourceId",pID,pFactId) = ""
    Set $$$DeepSeeIndexGLVN("BANKTRANS","%sourceIdReverse",pFactId) = pID
  }
 }
 If (SQLCODE'=0) {
  Set pErrorMsg = $G(%msg)
  Set tSC = $$$ERROR($$$GeneralError,"Error inserting/updating fact: (Source ID:'"_pID_"') "_pErrorMsg)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
 }
 Set:$D(zuSetting) zuSetting = $zu(115,1,zuSetting)

 // DTB886 - Restore original %var if it was trimmed by pFactList
 Merge %var=tOriginalVar

 If $$$ISERR(tSC) {
  Do ..%LogError(tSC)
  If ($G(pID)'="") {
  Do ##class(%DeepSee.Utils).%LogBuildError("BANKTRANS",pID,tSC)
 }
 }
 Quit tSC
}

/// Notification that a batch of facts are about to be processed.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %OnStartBatch(pCubeName As %String, pVerbose As %Boolean = 0) As %Status
{
 Quit $$$OK
}

/// Notification that a batch of facts have just been processed.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %OnEndBatch(pCubeName As %String, pVerbose As %Boolean = 0) As %Status
{
 Quit $$$OK
}

/// Perform the work of injecting one fact into the cube without associated source data.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %InjectFact(ByRef pFactId As %Integer, ByRef pValues As %String, Output pChunks As %Integer, pDimensionsOnly As %Boolean = 0, pFactList As %String = "") As %Status
{
 New %var,%source,%value
 Set tSC = $$$OK
 Try {
  Set %value=""
  Set %var("Dxcategory") = $G(pValues("category~~EXTERNAL"),$G(pValues("category")))
  Set %var("Dxccnum") = $G(pValues("ccnum~~EXTERNAL"),$G(pValues("ccnum")))
  Set %var("Dxcity") = $G(pValues("city~~EXTERNAL"),$G(pValues("city")))
  Set %var("Dxdob") = $G(pValues("dob~~EXTERNAL"),$G(pValues("dob")))
  Set %var("Dxfirst") = $G(pValues("first~~EXTERNAL"),$G(pValues("first")))
  Set %var("Dxgender") = $G(pValues("gender~~EXTERNAL"),$G(pValues("gender")))
  Set %var("Dxisfraud") = $G(pValues("isfraud~~EXTERNAL"),$G(pValues("isfraud")))
  Set %var("Dxjob") = $G(pValues("job~~EXTERNAL"),$G(pValues("job")))
  Set %var("Dxlast") = $G(pValues("last~~EXTERNAL"),$G(pValues("last")))
  Set %var("Dxmerchant") = $G(pValues("merchant~~EXTERNAL"),$G(pValues("merchant")))
  Set %var("Dxstate") = $G(pValues("state~~EXTERNAL"),$G(pValues("state")))
  Set %var("Dxstreet") = $G(pValues("street~~EXTERNAL"),$G(pValues("street")))
  Set %var("Dxtransdatetime") = $G(pValues("transdatetime~~EXTERNAL"),$G(pValues("transdatetime")))
  Set %var("Dxzip") = $G(pValues("zip~~EXTERNAL"),$G(pValues("zip")))
  Set tUseFactList = ($G(pFactList)'="")

  #; invoke method to process this fact
  Set pFactId = $G(pFactId)
  Set tSC = ##class(KafkaBank.Cubes.BankTrans.Fact).%ProcessFact("",0,.%var,.pFactId,.pErrorMsg,,pDimensionsOnly,pFactList,.tUpdater)
  If $$$ISOK(tSC) {
   Set:(pFactId'="")&&('pDimensionsOnly) pChunks(pFactId\64000+1) = ""
  }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Do ..%LogError(tSC)
 }
 Quit tSC
}

/// Perform the work of deleting one fact in the cube.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %DeleteFact(pID As %String, Output pFactId As %Integer, Output pErrorMsg As %String) As %Status
{
 Set tSC = $$$OK
 New %ROWID,%msg
 Try {
  Set (SQLCODE,tStarId) = ""
  Set pErrorMsg = ""
  Set pFactId = ""
  Set pFactId = $O($$$DeepSeeIndexGLVN("BANKTRANS","%sourceId",pID,""))
  If (pFactId'="") {
   &sql(DELETE FROM KafkaBank_Cubes_BankTrans.Fact WHERE %ID = :pFactId)
   Kill $$$DeepSeeIndexGLVN("BANKTRANS","%sourceId",pID,pFactId)
   Kill $$$DeepSeeIndexGLVN("BANKTRANS","%sourceIdReverse",pFactId)
  }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
 }
 Quit tSC
}

/// Notification that this cube is being killed.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %OnKillFacts() As %Status
{
 Set tSC = $$$OK
 Try {
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Do ..%LogError(tSC)
 }
 Quit tSC
}

/// Pre-compute certain aggregates.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %PrecomputeAggregates(pStartChunk As %Integer, pEndChunk As %Integer, pAggGLVN As %String, pVerbose As %Boolean = 0, pTaskGroup As %String = "", ByRef pCount As %Integer = 0) As %Status
{
 Set tSC = $$$OK
 New %ROWID,%msg,%var
 Kill @pAggGLVN
 Try {
  Set (SQLCODE) = ""
  Set tLastCount = 0
 If (pTaskGroup'="") {
  Set tDelta = pCount - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
 }
 Quit tSC
}

Parameter BITMAPCHUNKINMEMORY = 0;

Parameter CUBENAME = "BankTrans";

Parameter SOURCECLASS = "KafkaBank.Trans";

ForeignKey Dxcategory(Dxcategory) References KafkaBank.Cubes.BankTrans.Starcategory() [ NoCheck ];

ForeignKey Dxccnum(Dxccnum) References KafkaBank.Cubes.BankTrans.Starccnum() [ NoCheck ];

ForeignKey Dxcity(Dxcity) References KafkaBank.Cubes.BankTrans.Starcity() [ NoCheck ];

ForeignKey Dxdob(Dxdob) References KafkaBank.Cubes.BankTrans.Stardob() [ NoCheck ];

ForeignKey Dxfirst(Dxfirst) References KafkaBank.Cubes.BankTrans.Starfirst() [ NoCheck ];

ForeignKey Dxgender(Dxgender) References KafkaBank.Cubes.BankTrans.Stargender() [ NoCheck ];

ForeignKey Dxisfraud(Dxisfraud) References KafkaBank.Cubes.BankTrans.Starisfraud() [ NoCheck ];

ForeignKey Dxjob(Dxjob) References KafkaBank.Cubes.BankTrans.Starjob() [ NoCheck ];

ForeignKey Dxlast(Dxlast) References KafkaBank.Cubes.BankTrans.Starlast() [ NoCheck ];

ForeignKey Dxmerchant(Dxmerchant) References KafkaBank.Cubes.BankTrans.Starmerchant() [ NoCheck ];

ForeignKey Dxstate(Dxstate) References KafkaBank.Cubes.BankTrans.Starstate() [ NoCheck ];

ForeignKey Dxstreet(Dxstreet) References KafkaBank.Cubes.BankTrans.Starstreet() [ NoCheck ];

ForeignKey Dxtransdatetime(Dxtransdatetime) References KafkaBank.Cubes.BankTrans.Startransdatetime() [ NoCheck ];

ForeignKey Dxzip(Dxzip) References KafkaBank.Cubes.BankTrans.Starzip() [ NoCheck ];

Storage Default
{
<Data name="FactManagedData">
<Value name="1">
<Value>%sourceId</Value>
</Value>
<Value name="2">
<Value>Dxccnum</Value>
</Value>
<Value name="3">
<Value>Dxcategory</Value>
</Value>
<Value name="4">
<Value>Dxmerchant</Value>
</Value>
<Value name="5">
<Value>Dxtransdatetime</Value>
</Value>
<Value name="6">
<Value>Dxfirst</Value>
</Value>
<Value name="7">
<Value>Dxlast</Value>
</Value>
<Value name="8">
<Value>Dxgender</Value>
</Value>
<Value name="9">
<Value>Dxdob</Value>
</Value>
<Value name="10">
<Value>Dxjob</Value>
</Value>
<Value name="11">
<Value>Dxstate</Value>
</Value>
<Value name="12">
<Value>Dxstreet</Value>
</Value>
<Value name="13">
<Value>Dxcity</Value>
</Value>
<Value name="14">
<Value>Dxzip</Value>
</Value>
<Value name="15">
<Value>Dxisfraud</Value>
</Value>
</Data>
<DataLocation>^DeepSee.Fact("KAFKABANK.CUBES.BANKTRANS.FACT")</DataLocation>
<ExtentSize>10000000</ExtentSize>
<IdLocation>^DeepSee.Fact("KAFKABANK.CUBES.BANKTRANS.FACT")</IdLocation>
<Index name="$Fact">
<Location>^DeepSee.Index("BANKTRANS","$Fact")</Location>
</Index>
<Index name="Dxcategory">
<Location>^DeepSee.Index("BANKTRANS",3)</Location>
</Index>
<Index name="Dxccnum">
<Location>^DeepSee.Index("BANKTRANS",2)</Location>
</Index>
<Index name="Dxcity">
<Location>^DeepSee.Index("BANKTRANS",13)</Location>
</Index>
<Index name="Dxdob">
<Location>^DeepSee.Index("BANKTRANS",9)</Location>
</Index>
<Index name="Dxfirst">
<Location>^DeepSee.Index("BANKTRANS",6)</Location>
</Index>
<Index name="Dxgender">
<Location>^DeepSee.Index("BANKTRANS",8)</Location>
</Index>
<Index name="Dxisfraud">
<Location>^DeepSee.Index("BANKTRANS",15)</Location>
</Index>
<Index name="Dxjob">
<Location>^DeepSee.Index("BANKTRANS",10)</Location>
</Index>
<Index name="Dxlast">
<Location>^DeepSee.Index("BANKTRANS",7)</Location>
</Index>
<Index name="Dxmerchant">
<Location>^DeepSee.Index("BANKTRANS",4)</Location>
</Index>
<Index name="Dxstate">
<Location>^DeepSee.Index("BANKTRANS",12)</Location>
</Index>
<Index name="Dxstreet">
<Location>^DeepSee.Index("BANKTRANS",11)</Location>
</Index>
<Index name="Dxtransdatetime">
<Location>^DeepSee.Index("BANKTRANS",5)</Location>
</Index>
<Index name="Dxzip">
<Location>^DeepSee.Index("BANKTRANS",14)</Location>
</Index>
<IndexLocation>^KafkaBank.Cubes.BankT4EB9.FactI</IndexLocation>
<StreamLocation>^DeepSee.FactS("KAFKABANK.CUBES.BANKTRANS.FACT")</StreamLocation>
<Type>%Storage.Persistent</Type>
}

}
